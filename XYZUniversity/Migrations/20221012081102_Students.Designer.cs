// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XYZUniversity.Data;

#nullable disable

namespace XYZUniversity.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221012081102_Students")]
    partial class Students
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("XYZUniversity.Models.Payment", b =>
                {
                    b.Property<int>("PaymentRef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("double");

                    b.Property<int>("BankRef")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("Narration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentChannel_")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("PaymentDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentMethod_")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("PaymentRef");

                    b.HasIndex("BankRef")
                        .IsUnique();

                    b.HasIndex("PaymentChannel_");

                    b.HasIndex("PaymentMethod_");

                    b.HasIndex("StudentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("XYZUniversity.Models.PaymentChannel", b =>
                {
                    b.Property<string>("Channel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentChannelDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Channel");

                    b.ToTable("PaymentChannels");
                });

            modelBuilder.Entity("XYZUniversity.Models.PaymentMethod", b =>
                {
                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentMethodDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Method");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("XYZUniversity.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<DateTime>("DateOfBirth")
                        .IsUnicode(false)
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Stream")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("XYZUniversity.Models.Payment", b =>
                {
                    b.HasOne("XYZUniversity.Models.PaymentChannel", "PaymentChannel")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentChannel_")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Payment_PaymentChannel");

                    b.HasOne("XYZUniversity.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethod_")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Payment_PaymentMethod");

                    b.HasOne("XYZUniversity.Models.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Student");

                    b.Navigation("PaymentChannel");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("XYZUniversity.Models.PaymentChannel", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("XYZUniversity.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("XYZUniversity.Models.Student", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
